# excel-to-xml-converter

Allow to convert Excel `.xlsx` files into `.xml` files | This example was built to simulate report issuing to the Angola Central Bank

## üöÄ Beginning

The purpose of this project is to create a script that can read an Excel file `XLSX` and displays its contents in `XML` format.

### üîß Prerequisites

To develop the project, the following tools must first be installed:

- Code editor: **[Visual Studio Code](https://code.visualstudio.com/)** ![VS Code](/assets/img/vs_code_logo.png "VS Code")
- `Windows` `GCC` Compiler: **[MinGW-w64](https://www.mingw-w64.org/downloads/)** ![MinGW-w64](/assets/img/gcc_compiler.png "MinGW-w64 GCC Compiler")
- Support library (`XLSX` reading): **[libxlsxio](https://sourceforge.net/projects/xlsxio/files/0.2.31/xlsxio-0.2.31-binary-win64.zip/download/)**
- Compiler for support library **`libxlsio`** (optional): **[CMake](https://cmake.org/download/)** ![CMake](/assets/img/cmake.png "CMake")
- VS Code extension to support IntelliSense and build, etc: **[Microsoft C/C++ Extension for VS Code](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools)** ![C/C++ VS Code Extension](/assets/img/vs_code_extension.png "VS Code Extension")
- **[Git](https://git-scm.com/downloads)** ![Git](/assets/img/git_logo.png "Git")

‚ùó **Important**: After installing MinGW, add the bin path to the system PATH.

```makefile
C:\mingw-w64\bin
```

### ‚å®Ô∏è Code

Executar o SQL Server Management Studio

![ssms1](/assets/img/ssms1.png "SSMS")

Efectuar a conex√£o √† inst√¢ncia

![ssms2](/assets/img/ssms2.png "SSMS")

Escolher a base de dados de trabalho

![ssms3](/assets/img/ssms3.png "SSMS")

Montar a *query*

![ssms4](/assets/img/ssms4.png "SSMS")

Ap√≥s abrir o Visual Studio, ao criar o novo projecto, pesquisar pela extens√£o "Primavera" e escolher a op√ß√£o desejada.

![vs-project](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/vs_project.png "Project")

Ap√≥s escolher o tipo de linguagem a utilizar, clicar em "*Next*" ou "Pr√≥ximo". Na p√°gina seguinte, escolher o nome do projecto, a vers√£o do pacote .NET Framework a utilizar e clicar em "*Create*" ou "Criar".
Na janela que aparecer, devemos escolher sobre qual componente Primavera iremos trabalhar.

**Nota**: para que esta √∫ltima janela apare√ßa, √© necess√°rio que a configura√ß√£o do caminho de **[instala√ß√£o](#-instala%C3%A7%C3%A3o)** "*Installation Path*" esteja bem feita.

Para este projecto, clicou-se nas op√ß√µes de edi√ß√£o da "Ficha de Artigos" e utiliza√ß√£o dos motores (modelo e controlador) para artigos, como se v√™ nas imagens abaixo.

![project-option1](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/project_option1.png "Project Options")
![project-option2](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/project_option2.png "Project Options")
![project-option3](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/project_option3.png "Project Options")

#### Diagrama de Arquitectura

A seguir, √© apresentado o diagrama de arquitectura do projecto (escrito com **[Mermaid](https://mermaid.js.org/)**), destacando a separa√ß√£o das responsabilidades entre as camadas. Desde a interface do utilizador at√© aos mecanismos de intera√ß√£o com sistemas externos, cada elemento √© estrategicamente posicionado para refor√ßar a modularidade, a escalabilidade e a manutenibilidade do sistema. Esta estrutura facilita a compreens√£o de como os componentes colaboram para a realiza√ß√£o dos objectivos do software, alinhando-se assim, aos princ√≠pios de "***Clean Code***" e das boas pr√°ticas de programa√ß√£o em projectos de colabora√ß√£o.

##### Diagrama 1

![arch-diagram](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/arch_diagram.png "Architecture Diagram")

##### Diagrama com Mermaid

```mermaid
graph LR;
    subgraph layer-infra[Infraestrutura];
        tests("Testes (Tests)")
        exceptions("Excep√ß√µes (Exceptions)")
        models("Modelo (Models)")
            models --> bd("Base de Dados") <--> exceptions
        controllers("Controlador (Controllers)") --> models
            controllers --> business("L√≥gica de Neg√≥cios") <--> exceptions
        views("Apresenta√ß√£o (Views)") --> controllers
    end

classDef infra fill:#D4E6F1, stroke:#2980B9, color:#154360, stroke-width:2px; 
classDef view fill:#D5F5E3, stroke:#27AE60, color:#145A32, stroke-width:2px;      %% Verde para view
classDef control fill:#FADBD8, stroke:#E74C3C, color:#78281F, stroke-width:2px;   %% Rosa para controller
classDef model fill:#EBDEF0, stroke:#8E44AD, color:#4A235A, stroke-width:2px;     %% Roxo para model
classDef exception fill:#FDEBD0, stroke:#F39C12, color:#7E5109, stroke-width:2px; %% Amarelo para exception
classDef test fill:#8BD3DD, stroke:#006B7D, color:#006B7D, stroke-width:2px;      %% Azul para test

class infra infra;
class views view;
class business,controllers control;
class bd,models model;
class exceptions exception;
class tests test
```

Os diagramas acima espelhados mostram as seguintes interac√ß√µes:

- Que o utilizador interage com a **Apresenta√ß√£o** (Views);
- A Apresenta√ß√£o envia requisi√ß√µes ao **Controlador** (Controllers);
- O Controlador invoca os m√©todos do **Modelo** (Models) para realizar as opera√ß√µes necess√°rias;
- O Modelo cont√©m a classe de acesso √† **Base de Dados**;
- A **L√≥gica de Neg√≥cios** √© utilizada pelo Controlador para aplicar regras espec√≠ficas;
- As **Excep√ß√µes** (Exceptions) s√£o lan√ßadas pelas classes de L√≥gica de Neg√≥cios e Base de Dados para sinalizar erros e s√£o tratados em uma camada superior; 
- Os **Testes** (Tests) interagem com todos os componentes para verificar seu bom funcionamento.

**Obs**: Os diagramas s√£o uma representa√ß√£o simplificada da arquitectura deste projecto, a complexidade do diagrama pode variar dependendo do tamanho e da complexidade do projecto. Outros componentes e interac√ß√µes podem ser adicionados conforme a necessidade; eles proporcionam uma vis√£o geral dos principais componentes e suas interac√ß√µes e podem ser √∫teis para que se entenda a estrutura do sistema, comunicar a arquitectura para outras pessoas e planear o desenvolvimento de futuras funcionalidades (***features***).

#### Estrutura de Pastas

Em acordo com a organiza√ß√£o apresentada no diagrama de arquitectura, a estrutura de pastas do projecto sugere uma arquitectura **MVC** (*Models*, *Views* e *Controllers*) simplificada, tendo em vista uma clara separa√ß√£o das responsabilidades e promovendo a autonomia das camadas em um projecto C#. Esta abordagem estrutural n√£o s√≥ facilita a manuten√ß√£o e a evolu√ß√£o do c√≥digo, mas tamb√©m sustenta a integra√ß√£o e a colabora√ß√£o eficaz entre as diferentes partes da aplica√ß√£o. A seguir, detalha-se a disposi√ß√£o das pastas que comp√µem a aplica√ß√£o, cada uma desempenhando um papel espec√≠fico dentro do ecossistema de *software*:

-   `Views (Apresenta√ß√£o)/`: interface do utilizador (formul√°rio de artigos) que permite a intera√ß√£o com o sistema.
    -   `UIFichaArtigos.cs:`: formul√°rio para exibir e editar os dados de um artigo. Cont√©m a aba "Stocks" e nela √© disparado o evento para chamar o m√©todo ``` ActualizaCustoPadrao() ``` contido no ficheiro ``` ArtigoController ```.
-   `Controllers (Controlador)/`: lida com as requisi√ß√µes do utilizador, coordena as ac√ß√µes entre o Modelo (*Models*) e a Apresenta√ß√£o (*Views*) e cont√©m a l√≥gica de controlo da aplica√ß√£o.
    -   `ArtigoController.cs`: cont√©m o m√©todo ``` void ActualizarCustoPadrao(BasBEArtigo codigoArtigo) ``` para actualizar o custo padr√£o de um artigo, que utiliza o pre√ßo de custo da √∫ltima compra e a respectiva taxa de c√¢mbio efectua uma actualiza√ß√£o √† base de dados.
-   `Models (Modelo)/`: representa os dados e as regras de neg√≥cio da aplica√ß√£o. Inclui as classes que representam os objectos do sistema (Artigo) e as interfaces e classes de acesso aos dados fornecidos pela **Plataforma Cegid Primavera** (BasBEArtigo).
    -   `ArtigoRepository.cs`: classe que implementa a classe extens√≠vel **(BasBEArtigoFornecedor)** e cont√©m o m√©todo ``` DateTime GetDataUltimaCompra(BasBEArtigo codArtigo) ``` para obter a data da √∫ltima compra de um determinado artigo.
    -   `ComprasRepository.cs`: classe que cont√©m os m√©todos para obter o pre√ßo de custo da √∫ltima compra, a moeda utilizada na √∫ltima compra e a taxa de c√¢mbio praticada no momento da √∫ltima compra de um determinado artigo.
    -   `ConexaoBD.cs`: cont√©m as vari√°veis de conex√£o √† base de dados.
-   `Exceptions (Excep√ß√µes)/`: respons√°vel pelo tratamento de erros e excep√ß√µes que ocorrem durante a execu√ß√£o da aplica√ß√£o.
    -   `ErrorMessagePaneType.cs`: classe que implementa a classe extens√≠vel **(BasBSArtigos)** e cont√©m o m√©todo ``` void DisplayError(String mensagemErro) ``` que devolve um tipo espec√≠fico de "***MessageBox***" customizada herdada a partir da classe "BasBSArtigos".
    -   `ExceptionHandler.cs`: classe que implementa a super-classe **(*Exception*)** e que cont√©m o m√©todo ``` void MostrarMensagemErro(String mensagemErro) ``` que devolve uma excep√ß√£o em caso de ocorr√™ncia de erros durante a execu√ß√£o da aplica√ß√£o.
    -   `FileLogger.cs`: classe que permite a cria√ß√£o de um ficheiro de log, sempre que ocorrer um erro ou excep√ß√£o durante a execu√ß√£o da aplica√ß√£o.
-   `Tests (Testes)/`: pasta que cont√©m classes de testes unit√°rios e de integra√ß√£o que garantem a qualidade do c√≥digo e o funcionamento correcto da aplica√ß√£o.

## üì¶ Implanta√ß√£o

Compilar o c√≥digo desenvolvido, que √© convertido para um arquivo do tipo **dll** e para testar, devemos aceder √† aplica√ß√£o Primavera e configurar a extens√£o criada, recorrendo ao caminho "\bin\Debug", dentro do projecto.

![pri-extensibilidade](/CegidPrimaveraExtensibilitySamp1/Base/Assets/img/pri_extensib.png "Extension")

Para a implanta√ß√£o da *script* na base de dados que sustenta a aplica√ß√£o Cegid Primavera ERP v10, ser√° necess√°rio construir, primeiramente, a instru√ß√£o de consulta (***query***), em **linguagem T-SQL**, e para tal, ser√° utilizada a ferramenta *Microsoft SQL Server Management Studio*. 

Na aplica√ß√£o MSSMS, o *script* que se pretende criar ser√° disparado por evento, a cada inser√ß√£o de novas informa√ß√µes √† base de dados. Esse evento √© conhecido como ***trigger*** ou **gatilho** em portugu√™s.

Um *trigger* permite disparar um evento a cada inser√ß√£o (***INSERT***) ou altera√ß√£o (***UPDATE***) de informa√ß√µes em uma respectiva tabela, na base de dados. Eis o exemplo da cria√ß√£o de um *trigger*, para ambos os casos supracitados:

``` sql

        -- Cria um evento que √© disparado ap√≥s a inser√ß√£o de uma nova venda

        CREATE TRIGGER trg_CriaLogTransaccao
        ON TabelaVendas
        AFTER INSERT
        AS
        BEGIN
        SET NOCOUNT ON;
    
        UPDATE TabelaVendas
        SET TabelaVendas.DataGravacaoLog = inserted.DataVenda
        FROM TabelaVendas
        INNER JOIN inserted ON TabelaVendas.ID = inserted.ID
        WHERE TabelaVendas.TipoFactura != 'OR√áAMENTO'
        END
        
        GO
```
``` sql

        -- Cria um evento que √© disparado ap√≥s a altera√ß√£o de um produto

        CREATE TRIGGER trg_AlteraLog
        ON TabelaProdutos
        AFTER UPDATE
        AS
        BEGIN
        SET NOCOUNT ON;
    
        UPDATE TabelaProdutos
        SET TabelaProdutos.DataUltimaAlteracao = updated.DataGravacao
        FROM TabelaProdutos
        INNER JOIN updated ON TabelaProdutos.ID = updated.ID
        WHERE TabelaProdutos.Item LIKE 'COMPUTADOR%'
        END
        
        GO
```

Ap√≥s √† cria√ß√£o do *trigger*, deve-se aceder √† aplica√ß√£o Cegid Primavera ERP v10, **no m√≥dulo de Vendas**, na sec√ß√£o **"Pagamentos e Recebimentos"**, conforme demonstra a figura abaixo.

![pri-section](/assets/img/pri_section.png "Payables and Receivables Section")

Depois, deve-se clicar em **"Explora√ß√£o"**, seguido do item de menu **"Mais"** e escolher a op√ß√£o **"Documentos Emitidos"**, conforme demonstram as figuras abaixo.

![pri-section](/assets/img/pri_explore.png "Explore")
![pri-item](/assets/img/pri_item.png "See More")

Ser√° exibido um formul√°rio, no qual deve-se dar os seguintes passos:

- Seleccionar o **tipo de destinat√°rio** (Clientes, Fornecedores, etc), seleccionar as **datas** para a filtragem de informa√ß√µes, seleccionar o **tipo de documentos** a consultar e as restantes op√ß√µes, que s√£o facultativas; conforme demonstra a figura abaixo.

  ![pri-form](/assets/img/pri_form.png "Issued Documents")

- A seguir, deve-se clicar em **"Imprimir"**, para que seja emitido o relat√≥rio, conforme demonstra a figura abaixo.

  ![pri-report](/assets/img/pri_report.png "Issued Documents Report")

## üèÜ Resultado obtido

De acordo ao plano de projecto, o objectivo foi atingido. Com a cria√ß√£o do *script*, atrav√©s do qual foi gerado o *trigger*, foi poss√≠vel actualizar a base de dados com as informa√ß√µes solicitadas pelo cliente e foi criado um evento que permitir√° que esta actualiza√ß√£o seja sempre efectuada, sempre que houver uma inser√ß√£o de novas informa√ß√µes, na base de dados. Veja as figuras abaixo.

Inicialmente, algumas informa√ß√µes n√£o podiam ser visualizadas pelo cliente, conforme demonstra a figura abaixo.

![pri-objective](/assets/img/pri_objective1.png "Report With No Data")

Ap√≥s √†s devidas altera√ß√µes, as informa√ß√µes j√° podem ser visualizadas pelo cliente, conforme demonstra a figura abaixo.

![pri-objective](/assets/img/pri_objective2.png "Report With Required Data")

## üìÑ Licen√ßa

Este projecto est√° sob a licen√ßa do MIT - veja o arquivo [LICENSE](https://github.com/emjit-lda/Cegid-Primavera-ERP-v10-Extensibility-SAMP5/blob/shika-dev/LICENSE) para detalhes.

Apenas reserva-se a sua altera√ß√£o e difus√£o sob responsabilidade da **[EMJIT, LDA](https://www.emjit.com)**.

## üõ† Colaboradores

* **@[St√©fano Lorenzo](https://github.com/Stefano-Lorenzo)**.


## üëÅ Visitas

<h3>
    <p align="center">
      <br>
      <img align="center" src="https://profile-counter.glitch.me/emjit-lda/count.svg" />
    </p>
</h3>

‚å®Ô∏è Copyright ¬© 2025 **[EMJIT, LDA](https://www.emjit.com)** - Consultoria e Solu√ß√µes Tecnol√≥gicas ![emjit-02](/assets/img/emjit02.png "EMJIT, LDA")